# Example feature descriptor for our existing ledgers.
# Written as pseudo YAML using its mapping to JSON and then to `FeatureDescriptor` proto message

sandbox-classic:
  invocation_matrix:
    # TODO
  ledger:
    ordered_contract_ids: 
      # set only if contract-id seeding is not weak
    monotonic_record_time:
  participant:
    party_allocation:
      implicit_party_allocation: True 
    participant_pruning:
      supports_pruning_all_divulged_events: False
    ledger_config_management:
  experimental:
    rank_based_command_deduplication:
      completions_include_submission_ids: True

sandbox-next:
  invocation_matrix:
    - "with and without --enable-append-only-schema"
    - "wall-clock-time vs. static time"
    - "with and without --implicit-party-allocation=false"
    - "h2 vs. postgres"
    - "lf versions to test: default, latest, preview"
  ledger:
    ordered_contract_ids: 
      # set only if contract-id seeding is not weak
    monotonic_record_time:
  participant:
    party_allocation:
      implicit_party_allocation: #set to the value given on command line 
    participant_pruning:
      supports_pruning_all_divulged_events: True
    ledger_config_management:
  experimental:
    rank_based_command_deduplication:
      completions_include_submission_ids: True


canton:
  invocation_matrix:
    - "uck vs. non-uck"
    # TODO: there are likely more.
  ledger:
    ordered_contract_ids: 
  participant:
    party_allocation:
      implicit_party_allocation: False
    participant_pruning:
      supports_pruning_all_divulged_events: True
  experimental:
    rank_based_command_deduplication:
      completions_include_submission_ids: True
    non_unique_contract_keys:
      # Set only if participant is not connected to a single UCK domain