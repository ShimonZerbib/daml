// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/trace_context.proto";
import "google/rpc/status.proto";


option java_outer_classname = "CompletionOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// A completion represents the status of a submitted command on the ledger: it can be successful or failed.
//
// A completion is a definite answer  for the deduplication and rank guarantees described in ``commands.proto``
// if one of the following holds:
// - The status code is ``OK``.
// - The error details in the ``status`` contain the metadata key ``definite_answer`` with value ``true``.
message Completion {
  // The ID of the succeeded or failed command.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Required
  string command_id = 1;

  // Identifies the exact type of the error (as described in ``error.proto``).
  //
  // Optional
  google.rpc.Status status = 2;

  // The transaction_id of the transaction that resulted from the command with command_id.
  // Only set for successfully executed commands.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional
  string transaction_id = 3;

  // The application ID that was used for the submission, as described in ``commands.proto``.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  string application_id = 6;

  // The set of parties on whose behalf the commands were executed.
  // Contains the union of ``party`` and ``act_as`` from ``commands.proto``.
  // The order of the parties need not be the same as in the submission.
  // Each element must be a valid PartyIdString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  repeated string act_as = 7;

  // The submission ID this completion refers to, as described in ``commands.proto``.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  string submission_id = 4;

  // The submission rank of the submission this completion refers to, as described in ``commands.proto``.
  // Must be a valid LedgerString (as described in ``value.proto``).
  // Optional for historic completions where this data is not available.
  string submission_rank = 5;

  // The actual deduplication window used for the submission, which is derived from ``Commands.deduplication``.
  // The ledger may convert the deduplication period into other descriptions and extend the period
  // in implementation-specified ways.
  // Used to audit the deduplication guarantee described in ``commands.proto``.
  //
  // Optional; the deduplication guarantee applies even if the completion omits the deduplication period.
  oneof deduplication {
    // Specifies the start of the deduplication period by a completion stream offset.
    //
    // Must be a valid LedgerString (as described in ``value.proto``).
    string deduplication_offset = 8;

    // The deduplication period starts with the first completion whose record time is no earlier than this timepoint.
    google.protobuf.Timestamp deduplication_start = 9;

    // Specifies the length of the deduplication period.
    // The deduplication period starts with the first completion whose record time is at most
    // the given duration before the record time of this completion event.
    //
    // Must be non-negative.
    google.protobuf.Duration deduplication_duration = 10;
  }

  // The trace context submitted with the command.
  // This field is a future extension point and is currently not supported.
  // Optional
  TraceContext trace_context = 1000;
}
